import logging
import telebot
from telebot import types
import threading
import time
import os
from dotenv import load_dotenv

from data_loader import CatalogLoader

logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
EXCEL_PATH = os.getenv("EXCEL_PATH")
SELLER_CHAT_ID = os.getenv("SELLER_CHAT_ID")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –∑–∞–≥—Ä—É–∑—á–∏–∫ –∫–∞—Ç–∞–ª–æ–≥–∞
bot = telebot.TeleBot(BOT_TOKEN)
loader = CatalogLoader(EXCEL_PATH)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω: {chat_id: {item_id: quantity}}
user_carts = {}
# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–∞—Ö: {chat_id: {'cart': {}, 'phone': '', 'address': ''}}
user_orders = {}


def get_cart(chat_id):
    return user_carts.setdefault(chat_id, {})


def auto_reload_catalog():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
    while True:
        time.sleep(300)  # 5 –º–∏–Ω—É—Ç
        try:
            loader.reload()
            logging.info("–ö–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
reload_thread = threading.Thread(target=auto_reload_catalog, daemon=True)
reload_thread.start()


@bot.message_handler(commands=["start"])
def handle_start(message):
    text = (
        "üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üóÇ /categories ‚Äì –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "üìã /catalog ‚Äì –≤–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥\n"
        "üõç /cart ‚Äì –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É\n"
        "üîÑ /reload ‚Äì –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏)"
    )
    bot.send_message(message.chat.id, text)


@bot.message_handler(commands=["categories"])
def handle_categories(message):
    categories = loader.get_categories()
    if not categories:
        return bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    markup = types.InlineKeyboardMarkup()
    for category in categories:
        markup.add(types.InlineKeyboardButton(
            text=f"üìÇ {category}",
            callback_data=f"category_{category}"
        ))

    bot.send_message(message.chat.id, "üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)


@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("category_"))
def handle_category_selection(call):
    category = call.data.split("_", 1)[1]
    items = loader.get_by_category(category)

    if not items:
        return bot.answer_callback_query(call.id, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")

    markup = types.InlineKeyboardMarkup()
    for item_id, info in items.items():
        stock_info = f" (–æ—Å—Ç–∞–ª–æ—Å—å: {info['stock']})" if info['stock'] > 0 else " (–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏)"
        btn_text = f"{info['name']} ‚Äî {info['price']}‚ÇΩ{stock_info}"
        markup.add(types.InlineKeyboardButton(
            text=btn_text,
            callback_data=f"item_{item_id}"
        ))

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    markup.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
        callback_data="back_to_categories"
    ))

    bot.edit_message_text(
        text=f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda c: c.data == "back_to_categories")
def handle_back_to_categories(call):
    categories = loader.get_categories()
    markup = types.InlineKeyboardMarkup()
    for category in categories:
        markup.add(types.InlineKeyboardButton(
            text=f"üìÇ {category}",
            callback_data=f"category_{category}"
        ))

    bot.edit_message_text(
        text="üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("item_"))
def handle_item_details(call):
    item_id = int(call.data.split("_")[1])
    info = loader.data.get(item_id)

    if not info:
        return bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    text = (
        f"üè∑ {info['name']}\n"
        f"üí∞ –¶–µ–Ω–∞: {info['price']}‚ÇΩ\n"
        f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {info['stock']} —à—Ç.\n"
        f"üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {info['category']}"
    )

    markup = types.InlineKeyboardMarkup()
    if info['stock'] > 0:
        markup.add(types.InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
            callback_data=f"add_{item_id}"
        ))
    else:
        markup.add(types.InlineKeyboardButton(
            text="‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏",
            callback_data="unavailable"
        ))

    markup.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        callback_data=f"category_{info['category']}"
    ))

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    if info.get('image_url') and info['image_url'].strip():
        try:
            bot.send_photo(
                call.message.chat.id,
                info['image_url'],
                caption=text,
                reply_markup=markup
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            bot.send_message(call.message.chat.id, text, reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, text, reply_markup=markup)


@bot.message_handler(commands=["catalog"])
def handle_catalog(message):
    items = loader.data
    if not items:
        return bot.send_message(message.chat.id, "–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")

    markup = types.InlineKeyboardMarkup()
    for item_id, info in items.items():
        stock_info = f" (–æ—Å—Ç–∞–ª–æ—Å—å: {info['stock']})" if info['stock'] > 0 else " (–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏)"
        btn_text = f"{info['name']} ‚Äî {info['price']}‚ÇΩ{stock_info}"
        markup.add(types.InlineKeyboardButton(
            text=btn_text,
            callback_data=f"item_{item_id}"
        ))
    bot.send_message(message.chat.id, "üìã –í–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥:", reply_markup=markup)


@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("add_"))
def handle_add_to_cart(call):
    chat_id = call.message.chat.id
    item_id = int(call.data.split("_")[1])
    info = loader.data.get(item_id)

    if not info:
        return bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    if info["stock"] <= 0:
        return bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.")

    cart = get_cart(chat_id)
    current_in_cart = cart.get(item_id, 0)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
    if current_in_cart >= info["stock"]:
        return bot.answer_callback_query(call.id, "–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")

    cart[item_id] = current_in_cart + 1
    bot.answer_callback_query(call.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ¬´{info['name']}¬ª (–≤ –∫–æ—Ä–∑–∏–Ω–µ: {cart[item_id]})")


@bot.message_handler(commands=["cart"])
def handle_view_cart(message):
    chat_id = message.chat.id
    cart = get_cart(chat_id)

    if not cart:
        return bot.send_message(chat_id, "üõç –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")

    text_lines = ["üõç –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"]
    total = 0
    markup = types.InlineKeyboardMarkup()

    for item_id, qty in cart.items():
        info = loader.data.get(item_id)
        if not info:  # –¢–æ–≤–∞—Ä –º–æ–≥ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
            continue

        cost = info["price"] * qty
        total += cost
        text_lines.append(f"‚Ä¢ {info['name']} √ó{qty} ‚Äî {cost}‚ÇΩ")

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        markup.row(
            types.InlineKeyboardButton(
                text=f"‚ûñ {info['name']}",
                callback_data=f"remove_{item_id}"
            ),
            types.InlineKeyboardButton(
                text=f"‚ûï {info['name']}",
                callback_data=f"add_cart_{item_id}"
            )
        )

    text_lines.append(f"\nüí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ")
    text = "\n".join(text_lines)

    if total > 0:
        markup.add(types.InlineKeyboardButton(
            text="üöö –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
            callback_data="checkout"
        ))

    markup.add(types.InlineKeyboardButton(
        text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
        callback_data="clear_cart"
    ))

    bot.send_message(chat_id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("add_cart_"))
def handle_add_from_cart(call):
    chat_id = call.message.chat.id
    item_id = int(call.data.split("_")[2])
    info = loader.data.get(item_id)

    if not info:
        return bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    cart = get_cart(chat_id)
    current_in_cart = cart.get(item_id, 0)

    if current_in_cart >= info["stock"]:
        return bot.answer_callback_query(call.id, "–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")

    cart[item_id] = current_in_cart + 1
    bot.answer_callback_query(call.id, f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
    handle_view_cart_update(call.message)


@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("remove_"))
def handle_remove_from_cart(call):
    chat_id = call.message.chat.id
    item_id = int(call.data.split("_")[1])
    cart = get_cart(chat_id)

    if item_id not in cart:
        return bot.answer_callback_query(call.id, "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ.")

    cart[item_id] -= 1
    if cart[item_id] <= 0:
        del cart[item_id]

    bot.answer_callback_query(call.id, "‚ûñ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
    handle_view_cart_update(call.message)


def handle_view_cart_update(message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π"""
    chat_id = message.chat.id
    cart = get_cart(chat_id)

    if not cart:
        text = "üõç –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
        markup = types.InlineKeyboardMarkup()
    else:
        text_lines = ["üõç –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"]
        total = 0
        markup = types.InlineKeyboardMarkup()

        for item_id, qty in cart.items():
            info = loader.data.get(item_id)
            if not info:
                continue

            cost = info["price"] * qty
            total += cost
            text_lines.append(f"‚Ä¢ {info['name']} √ó{qty} ‚Äî {cost}‚ÇΩ")

            markup.row(
                types.InlineKeyboardButton(
                    text=f"‚ûñ {info['name']}",
                    callback_data=f"remove_{item_id}"
                ),
                types.InlineKeyboardButton(
                    text=f"‚ûï {info['name']}",
                    callback_data=f"add_cart_{item_id}"
                )
            )

        text_lines.append(f"\nüí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ")
        text = "\n".join(text_lines)

        if total > 0:
            markup.add(types.InlineKeyboardButton(
                text="üöö –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
                callback_data="checkout"
            ))

        markup.add(types.InlineKeyboardButton(
            text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
            callback_data="clear_cart"
        ))

    try:
        bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id=message.message_id,
            reply_markup=markup
        )
    except:
        pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ


@bot.callback_query_handler(func=lambda c: c.data == "clear_cart")
def handle_clear_cart(call):
    chat_id = call.message.chat.id
    user_carts[chat_id] = {}
    bot.answer_callback_query(call.id, "üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")

    text = "üõç –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
    markup = types.InlineKeyboardMarkup()

    bot.edit_message_text(
        text=text,
        chat_id=chat_id,
        message_id=call.message.message_id,
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda c: c.data == "checkout")
def handle_checkout(call):
    chat_id = call.message.chat.id
    cart = get_cart(chat_id)

    if not cart:
        return bot.answer_callback_query(call.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    user_orders[chat_id] = {'cart': cart.copy(), 'phone': '', 'address': ''}

    bot.answer_callback_query(call.id, "–û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑...")
    bot.send_message(
        chat_id,
        "üì± –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: +373 69 123456)"
    )
    bot.register_next_step_handler_by_chat_id(chat_id, get_phone_number)


def get_phone_number(message):
    chat_id = message.chat.id
    phone = message.text.strip()

    if len(phone) < 10:
        bot.send_message(chat_id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        bot.register_next_step_handler_by_chat_id(chat_id, get_phone_number)
        return

    user_orders[chat_id]['phone'] = phone
    bot.send_message(
        chat_id,
        "üè† –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
    )
    bot.register_next_step_handler_by_chat_id(chat_id, get_delivery_address)


def get_delivery_address(message):
    chat_id = message.chat.id
    address = message.text.strip()

    if len(address) < 10:
        bot.send_message(chat_id, "‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:")
        bot.register_next_step_handler_by_chat_id(chat_id, get_delivery_address)
        return

    user_orders[chat_id]['address'] = address
    finalize_order(chat_id)


def finalize_order(chat_id):
    order = user_orders.get(chat_id)
    if not order:
        return

    cart = order['cart']
    phone = order['phone']
    address = order['address']

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞
    summary = []
    total_cost = 0
    successful_items = []

    for item_id, qty in list(cart.items()):
        info = loader.data.get(item_id)
        if not info:
            summary.append(f"‚ùå {item_id} ‚Äî —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue

        if info["stock"] < qty:
            summary.append(f"‚ùå {info['name']} (–∑–∞–∫–∞–∑–∞–Ω–æ: {qty}, –¥–æ—Å—Ç—É–ø–Ω–æ: {info['stock']})")
            continue

        # –£—Å–ø–µ—à–Ω—ã–π —Ç–æ–≤–∞—Ä
        cost = info['price'] * qty
        total_cost += cost
        loader.reduce_stock(item_id, qty)
        summary.append(f"‚úÖ {info['name']} √ó{qty} ‚Äî {cost}‚ÇΩ")
        successful_items.append({
            'name': info['name'],
            'quantity': qty,
            'price': info['price'],
            'cost': cost
        })

    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_carts[chat_id] = {}
    del user_orders[chat_id]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_message = (
            f"üéâ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üè† –ê–¥—Ä–µ—Å: {address}\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä—ã:\n" + "\n".join(summary) +
            f"\n\nüí∞ –ò—Ç–æ–≥–æ: {total_cost}‚ÇΩ\n\n"
            f"üöö –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏."
    )
    bot.send_message(chat_id, user_message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
    if successful_items and SELLER_CHAT_ID:
        user_info = bot.get_chat(chat_id)
        customer_name = f"{user_info.first_name} {user_info.last_name or ''}".strip()
        if not customer_name:
            customer_name = user_info.username or f"ID: {chat_id}"

        seller_message = (
            f"üîî –ù–û–í–´–ô –ó–ê–ö–ê–ó!\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {customer_name}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üè† –ê–¥—Ä–µ—Å: {address}\n\n"
            f"üì¶ –ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
        )

        for item in successful_items:
            seller_message += f"‚Ä¢ {item['name']} √ó{item['quantity']} ‚Äî {item['cost']}‚ÇΩ\n"

        seller_message += f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_cost}‚ÇΩ"

        try:
            bot.send_message(SELLER_CHAT_ID, seller_message)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")


@bot.message_handler(commands=["reload"])
def handle_reload_catalog(message):
    try:
        loader.reload()
        bot.send_message(message.chat.id, "‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        logging.info(f"–ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.chat.id}")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")


@bot.callback_query_handler(func=lambda c: c.data == "unavailable")
def handle_unavailable(call):
    bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")


if __name__ == "__main__":
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    bot.infinity_polling(timeout=60, long_polling_timeout=5)