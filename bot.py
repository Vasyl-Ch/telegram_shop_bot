import logging
import telebot
from telebot import types
import threading
import time
import os
from dotenv import load_dotenv

from data_loader import CatalogLoader

logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
EXCEL_PATH = os.getenv("EXCEL_PATH")
SELLER_CHAT_ID = os.getenv("SELLER_CHAT_ID")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –∑–∞–≥—Ä—É–∑—á–∏–∫ –∫–∞—Ç–∞–ª–æ–≥–∞
bot = telebot.TeleBot(BOT_TOKEN)
loader = CatalogLoader(EXCEL_PATH)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω: {chat_id: {item_id: quantity}}
user_carts = {}
# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–∞—Ö: {chat_id: {'cart': {}, 'phone': '', 'address': ''}}
user_orders = {}
# –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤: {order_id: {'chat_id': chat_id, 'items': [], 'total': 0, 'phone': '', 'address': '', 'status': 'pending'/'confirmed'/'delivered'/'cancelled'}}
all_orders = {}
order_counter = 1

def get_cart(chat_id):
    return user_carts.setdefault(chat_id, {})


def auto_reload_catalog():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
    while True:
        time.sleep(300)  # 5 –º–∏–Ω—É—Ç
        try:
            loader.reload()
            logging.info("–ö–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
reload_thread = threading.Thread(target=auto_reload_catalog, daemon=True)
reload_thread.start()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ
@bot.message_handler(content_types=['photo'])
def handle_photos(message):
    bot.reply_to(message, "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."
                          " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(commands=["start"])
def handle_start(message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"), types.KeyboardButton("üìã –ö–∞—Ç–∞–ª–æ–≥"))
    markup.row(types.KeyboardButton("üõç –ö–æ—Ä–∑–∏–Ω–∞"), types.KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"))

    text = (
        "üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"
    )
    bot.send_message(message.chat.id, text, reply_markup=markup)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    bot.set_my_commands([
        types.BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.BotCommand("categories", "–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
        types.BotCommand("catalog", "–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥"),
        types.BotCommand("cart", "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É"),
        types.BotCommand("reload", "–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥")
    ])


@bot.message_handler(func=lambda message: message.text == "üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
@bot.message_handler(commands=["categories"])
def handle_categories(message):
    categories = loader.get_categories()
    if not categories:
        return bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    markup = types.InlineKeyboardMarkup()
    for category in categories:
        markup.add(types.InlineKeyboardButton(
            text=f"üìÇ {category}",
            callback_data=f"category_{category}"
        ))

    bot.send_message(message.chat.id, "üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)


@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("category_"))
def handle_category_selection(call):
    try:
        category = call.data.split("_", 1)[1]
        items = loader.get_by_category(category)

        if not items:
            return bot.answer_callback_query(call.id, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")

        markup = types.InlineKeyboardMarkup()
        for item_id, info in items.items():
            stock_info = f" (–æ—Å—Ç–∞–ª–æ—Å—å: {info['stock']})" if info['stock'] > 0 else " (–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏)"
            btn_text = f"{info['name']} ‚Äî {info['price']}‚ÇΩ{stock_info}"
            markup.add(types.InlineKeyboardButton(
                text=btn_text,
                callback_data=f"item_{item_id}"
            ))

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        markup.add(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="back_to_categories"
        ))

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            if hasattr(call.message, 'text'):
                bot.edit_message_text(
                    text=f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=markup
                )
            else:
                bot.send_message(
                    chat_id=call.message.chat.id,
                    text=f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}",
                    reply_markup=markup
                )
        except telebot.apihelper.ApiTelegramException as e:
            if "there is no text in the message to edit" in str(e):
                bot.send_message(
                    chat_id=call.message.chat.id,
                    text=f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}",
                    reply_markup=markup
                )
            else:
                raise e

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_category_selection: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@bot.callback_query_handler(func=lambda c: c.data == "back_to_categories")
def handle_back_to_categories(call):
    try:
        categories = loader.get_categories()
        markup = types.InlineKeyboardMarkup()
        for category in categories:
            markup.add(types.InlineKeyboardButton(
                text=f"üìÇ {category}",
                callback_data=f"category_{category}"
            ))

        try:
            if hasattr(call.message, 'text'):
                bot.edit_message_text(
                    text="üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=markup
                )
            else:
                bot.send_message(
                    chat_id=call.message.chat.id,
                    text="üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                    reply_markup=markup
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            bot.send_message(
                chat_id=call.message.chat.id,
                text="üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=markup
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_back_to_categories: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("item_"))
def handle_item_details(call):
    try:
        item_id = int(call.data.split("_")[1])
        info = loader.data.get(item_id)

        if not info:
            return bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        text = (
            f"üè∑ {info['name']}\n"
            f"üí∞ –¶–µ–Ω–∞: {info['price']}‚ÇΩ\n"
            f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {info['stock']} —à—Ç.\n"
            f"üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {info['category']}"
        )

        markup = types.InlineKeyboardMarkup()
        if info['stock'] > 0:
            markup.add(types.InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                callback_data=f"add_{item_id}"
            ))
        else:
            markup.add(types.InlineKeyboardButton(
                text="‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏",
                callback_data="unavailable"
            ))

        markup.add(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            callback_data=f"category_{info['category']}"
        ))

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        if info.get('image_url') and info['image_url'].strip():
            try:
                bot.send_photo(
                    call.message.chat.id,
                    info['image_url'],
                    caption=text,
                    reply_markup=markup
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                bot.send_message(call.message.chat.id, text, reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, text, reply_markup=markup)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_item_details: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@bot.message_handler(func=lambda message: message.text == "üìã –ö–∞—Ç–∞–ª–æ–≥")
@bot.message_handler(commands=["catalog"])
def handle_catalog(message):
    items = loader.data
    if not items:
        return bot.send_message(message.chat.id, "–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")

    markup = types.InlineKeyboardMarkup()
    for item_id, info in items.items():
        stock_info = f" (–æ—Å—Ç–∞–ª–æ—Å—å: {info['stock']})" if info['stock'] > 0 else " (–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏)"
        btn_text = f"{info['name']} ‚Äî {info['price']}‚ÇΩ{stock_info}"
        markup.add(types.InlineKeyboardButton(
            text=btn_text,
            callback_data=f"item_{item_id}"
        ))
    bot.send_message(message.chat.id, "üìã –í–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥:", reply_markup=markup)


@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("add_") and not c.data.startswith("add_cart_"))
def handle_add_to_cart(call):
    try:
        chat_id = call.message.chat.id
        # call.data –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∏–¥–∞ "add_123", –Ω–æ —Ç–∞–∫–∂–µ –µ—Å—Ç—å "add_cart_123"
        # –ú—ã —É–∂–µ –∏—Å–∫–ª—é—á–∏–ª–∏ "add_cart_" –≤ —Ñ–∏–ª—å—Ç—Ä–µ, –ø–æ—ç—Ç–æ–º—É —Ç—É—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ split("_")[1]
        item_id_str = call.data.split("_")[1]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ item_id –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á–∏—Å–ª–æ
        if not item_id_str.isdigit():
            return bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞.")
        item_id = int(item_id_str)
        info = loader.data.get(item_id)

        if not info:
            return bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        if info["stock"] <= 0:
            return bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.")

        cart = get_cart(chat_id)
        current_in_cart = cart.get(item_id, 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
        if current_in_cart >= info["stock"]:
            return bot.answer_callback_query(call.id, "–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")

        cart[item_id] = current_in_cart + 1
        bot.answer_callback_query(call.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ¬´{info['name']}¬ª (–≤ –∫–æ—Ä–∑–∏–Ω–µ: {cart[item_id]})")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_add_to_cart: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@bot.message_handler(func=lambda message: message.text == "üõç –ö–æ—Ä–∑–∏–Ω–∞")
@bot.message_handler(commands=["cart"])
def handle_view_cart(message):
    chat_id = message.chat.id
    cart = get_cart(chat_id)

    if not cart:
        return bot.send_message(chat_id, "üõç –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")

    text_lines = ["üõç –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"]
    total = 0
    markup = types.InlineKeyboardMarkup()

    for item_id, qty in cart.items():
        info = loader.data.get(item_id)
        if not info:  # –¢–æ–≤–∞—Ä –º–æ–≥ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
            continue

        cost = info["price"] * qty
        total += cost
        text_lines.append(f"‚Ä¢ {info['name']} √ó{qty} ‚Äî {cost}‚ÇΩ")

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        markup.row(
            types.InlineKeyboardButton(
                text=f"‚ûñ {info['name']}",
                callback_data=f"remove_{item_id}"
            ),
            types.InlineKeyboardButton(
                text=f"‚ûï {info['name']}",
                callback_data=f"add_cart_{item_id}"
            )
        )

    text_lines.append(f"\nüí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ")
    text = "\n".join(text_lines)

    if total > 0:
        markup.add(types.InlineKeyboardButton(
            text="üöö –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
            callback_data="checkout"
        ))

    markup.add(types.InlineKeyboardButton(
        text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
        callback_data="clear_cart"
    ))

    bot.send_message(chat_id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("add_cart_"))
def handle_add_from_cart(call):
    try:
        chat_id = call.message.chat.id
        item_id = int(call.data.split("_")[2])
        info = loader.data.get(item_id)

        if not info:
            return bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        cart = get_cart(chat_id)
        current_in_cart = cart.get(item_id, 0)

        if current_in_cart >= info["stock"]:
            return bot.answer_callback_query(call.id, "–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")

        cart[item_id] = current_in_cart + 1
        bot.answer_callback_query(call.id, "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ")
        handle_view_cart_update(call.message)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_add_from_cart: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("remove_"))
def handle_remove_from_cart(call):
    try:
        chat_id = call.message.chat.id
        item_id = int(call.data.split("_")[1])
        cart = get_cart(chat_id)

        if item_id not in cart:
            return bot.answer_callback_query(call.id, "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ.")

        cart[item_id] -= 1
        if cart[item_id] <= 0:
            del cart[item_id]

        bot.answer_callback_query(call.id, "‚ûñ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")
        handle_view_cart_update(call.message)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_remove_from_cart: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


def handle_view_cart_update(message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π"""
    try:
        chat_id = message.chat.id
        cart = get_cart(chat_id)

        if not cart:
            text = "üõç –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
            markup = types.InlineKeyboardMarkup()
        else:
            text_lines = ["üõç –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"]
            total = 0
            markup = types.InlineKeyboardMarkup()

            for item_id, qty in cart.items():
                info = loader.data.get(item_id)
                if not info:
                    continue

                cost = info["price"] * qty
                total += cost
                text_lines.append(f"‚Ä¢ {info['name']} √ó{qty} ‚Äî {cost}‚ÇΩ")

                markup.row(
                    types.InlineKeyboardButton(
                        text=f"‚ûñ {info['name']}",
                        callback_data=f"remove_{item_id}"
                    ),
                    types.InlineKeyboardButton(
                        text=f"‚ûï {info['name']}",
                        callback_data=f"add_cart_{item_id}"
                    )
                )

            text_lines.append(f"\nüí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ")
            text = "\n".join(text_lines)

            if total > 0:
                markup.add(types.InlineKeyboardButton(
                    text="üöö –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
                    callback_data="checkout"
                ))

            markup.add(types.InlineKeyboardButton(
                text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
                callback_data="clear_cart"
            ))

        try:
            bot.edit_message_text(
                text=text,
                chat_id=chat_id,
                message_id=message.message_id,
                reply_markup=markup
            )
        except telebot.apihelper.ApiTelegramException as e:
            if "there is no text in the message to edit" in str(e) or "message is not modified" in str(e):
                bot.send_message(chat_id, text, reply_markup=markup)
            else:
                logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã: {e}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_view_cart_update: {e}")


@bot.callback_query_handler(func=lambda c: c.data == "clear_cart")
def handle_clear_cart(call):
    try:
        chat_id = call.message.chat.id
        user_carts[chat_id] = {}
        bot.answer_callback_query(call.id, "üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")

        text = "üõç –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
        markup = types.InlineKeyboardMarkup()

        try:
            bot.edit_message_text(
                text=text,
                chat_id=chat_id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
        except telebot.apihelper.ApiTelegramException as e:
            if "there is no text in the message to edit" in str(e):
                bot.send_message(chat_id, text, reply_markup=markup)
            else:
                raise e

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_clear_cart: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@bot.callback_query_handler(func=lambda c: c.data == "checkout")
def handle_checkout(call):
    try:
        chat_id = call.message.chat.id
        cart = get_cart(chat_id)

        if not cart:
            return bot.answer_callback_query(call.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        user_orders[chat_id] = {'cart': cart.copy(), 'phone': '', 'address': ''}

        bot.answer_callback_query(call.id, "–û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑...")
        bot.send_message(
            chat_id,
            "üì± –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: +373 69 123456)"
        )
        bot.register_next_step_handler_by_chat_id(chat_id, get_phone_number)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_checkout: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


def get_phone_number(message):
    try:
        chat_id = message.chat.id
        phone = message.text.strip()

        if len(phone) < 10:
            bot.send_message(chat_id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler_by_chat_id(chat_id, get_phone_number)
            return

        user_orders[chat_id]['phone'] = phone
        bot.send_message(
            chat_id,
            "üè† –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
        )
        bot.register_next_step_handler_by_chat_id(chat_id, get_delivery_address)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ get_phone_number: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∑–∞–Ω–æ–≤–æ.")


def get_delivery_address(message):
    try:
        chat_id = message.chat.id
        address = message.text.strip()

        if len(address) < 10:
            bot.send_message(chat_id, "‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:")
            bot.register_next_step_handler_by_chat_id(chat_id, get_delivery_address)
            return

        user_orders[chat_id]['address'] = address
        finalize_order(chat_id)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ get_delivery_address: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∑–∞–Ω–æ–≤–æ.")


def finalize_order(chat_id):
    try:
        global order_counter

        order = user_orders.get(chat_id)
        if not order:
            logging.error(f"–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è chat_id: {chat_id}")
            return bot.send_message(chat_id,
                                    "‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")

        cart = order['cart']
        phone = order['phone']
        address = order['address']

        if not cart:
            logging.error(f"–ü—É—Å—Ç–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –¥–ª—è chat_id: {chat_id}")
            return bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        summary = []
        total_cost = 0
        order_items = []
        errors = []

        for item_id, qty in cart.items():
            info = loader.data.get(item_id)
            if not info:
                errors.append(f"‚ùå –¢–æ–≤–∞—Ä ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ")
                continue

            if info["stock"] < qty:
                errors.append(f"‚ùå {info['name']} (–∑–∞–∫–∞–∑–∞–Ω–æ: {qty}, –¥–æ—Å—Ç—É–ø–Ω–æ: {info['stock']})")
                continue

            cost = info['price'] * qty
            total_cost += cost
            order_items.append({
                'id': item_id,
                'name': info['name'],
                'quantity': qty,
                'price': info['price'],
                'cost': cost,
                'stock': info['stock']
            })
            summary.append(f"‚úÖ {info['name']} √ó{qty} ‚Äî {cost}‚ÇΩ")

        if not order_items:
            message_parts = ["‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –∏–∑ –∑–∞–∫–∞–∑–∞.\n\n"]
            message_parts.append("–ü—Ä–∏—á–∏–Ω—ã:\n")
            message_parts.extend(errors)
            message_parts.append("\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å–Ω–æ–≤–∞.")
            return bot.send_message(chat_id, "".join(message_parts))

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "pending"
        order_id = order_counter
        order_counter += 1

        all_orders[order_id] = {
            'chat_id': chat_id,
            'items': order_items,
            'total': total_cost,
            'phone': phone,
            'address': address,
            'errors': errors,
            'status': 'pending'
        }

        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_carts[chat_id] = {}
        if chat_id in user_orders:
            del user_orders[chat_id]

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        message_parts = []
        message_parts.append(f"üîÑ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É!\n\n")
        message_parts.append(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n")
        message_parts.append(f"üè† –ê–¥—Ä–µ—Å: {address}\n\n")
        message_parts.append("üì¶ –¢–æ–≤–∞—Ä—ã:\n")
        message_parts.extend(summary)
        message_parts.append(f"\n\nüí∞ –ò—Ç–æ–≥–æ: {total_cost}‚ÇΩ\n\n")
        message_parts.append("‚è≥ –°—Ç–∞—Ç—É—Å: –í –æ–±—Ä–∞–±–æ—Ç–∫–µ")

        if errors:
            message_parts.append("\n\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã:\n")
            message_parts.extend(errors)

        bot.send_message(chat_id, "".join(message_parts))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
        if SELLER_CHAT_ID:
            try:
                user_info = bot.get_chat(chat_id)
                customer_name = f"{user_info.first_name} {user_info.last_name or ''}".strip()
                if not customer_name:
                    customer_name = user_info.username or f"ID: {chat_id}"

                seller_message = (
                    f"üîî –ù–û–í–´–ô –ó–ê–ö–ê–ó #{order_id}!\n\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {customer_name}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                    f"üè† –ê–¥—Ä–µ—Å: {address}\n\n"
                    f"üì¶ –ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
                )

                for item in order_items:
                    seller_message += f"‚Ä¢ {item['name']} √ó{item['quantity']} ‚Äî {item['cost']}‚ÇΩ (–≤ –Ω–∞–ª–∏—á–∏–∏: {item['stock']})\n"

                if errors:
                    seller_message += "\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–∫–∞–∑–æ–º:\n"
                    seller_message += "\n".join(errors) + "\n"

                seller_message += f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_cost}‚ÇΩ\n\n"
                seller_message += "üîÑ –°—Ç–∞—Ç—É—Å: –í –æ–±—Ä–∞–±–æ—Ç–∫–µ"

                markup = types.InlineKeyboardMarkup()
                markup.row(
                    types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_order_{order_id}"),
                    types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_order_{order_id}")
                )

                msg = bot.send_message(SELLER_CHAT_ID, seller_message, reply_markup=markup)
                all_orders[order_id]['seller_message_id'] = msg.message_id

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ finalize_order –¥–ª—è chat_id {chat_id}: {e}", exc_info=True)
        try:
            bot.send_message(
                chat_id,
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. "
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception as send_error:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {send_error}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–º
@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("confirm_order_"))
def handle_confirm_order(call):
    try:
        order_id = int(call.data.split("_")[2])
        order = all_orders.get(order_id)

        if not order:
            return bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

        if order['status'] != 'pending':
            return bot.answer_callback_query(call.id, f"–ó–∞–∫–∞–∑ —É–∂–µ {order['status']}.")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order['status'] = 'confirmed'

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø—Ä–æ–¥–∞–≤—Ü–∞
        seller_message = (
            f"üîÑ –ó–ê–ö–ê–ó #{order_id} (–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω)\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {bot.get_chat(order['chat_id']).first_name}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
            f"üè† –ê–¥—Ä–µ—Å: {order['address']}\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä—ã:\n"
        )

        for item in order['items']:
            seller_message += f"‚Ä¢ {item['name']} √ó{item['quantity']} ‚Äî {item['cost']}‚ÇΩ\n"

        seller_message += f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {order['total']}‚ÇΩ\n\n"
        seller_message += f"‚úÖ –°—Ç–∞—Ç—É—Å: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (–æ–∂–∏–¥–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏)"

        # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ - —Ç–æ–ª—å–∫–æ "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üöö –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", callback_data=f"deliver_order_{order_id}"))
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_order_{order_id}"))

        try:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=seller_message,
                reply_markup=markup
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
        bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π.")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        user_message = (
            f"üîÑ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\n\n"
            f"–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à –∑–∞–∫–∞–∑. –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏."
        )
        bot.send_message(order['chat_id'], user_message)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")


# –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ (handle_deliver_order)
@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("deliver_order_"))
def handle_deliver_order(call):
    try:
        order_id = int(call.data.split("_")[2])
        order = all_orders.get(order_id)

        if not order:
            return bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

        if order['status'] != 'confirmed':
            return bot.answer_callback_query(call.id,
                                             f"–ó–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç–∞–≤–∫–æ–π. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {order['status']}")

        # –í—ã—á–∏—Ç–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
        for item in order['items']:
            try:
                loader.reduce_stock(item['id'], item['quantity'])
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ {item['id']}: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order['status'] = 'delivered'

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø—Ä–æ–¥–∞–≤—Ü–∞ (—É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏)
        seller_message = (
            f"‚úÖ –ó–ê–ö–ê–ó #{order_id} (–î–æ—Å—Ç–∞–≤–ª–µ–Ω)\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {bot.get_chat(order['chat_id']).first_name}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
            f"üè† –ê–¥—Ä–µ—Å: {order['address']}\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä—ã:\n"
        )

        for item in order['items']:
            seller_message += f"‚Ä¢ {item['name']} √ó{item['quantity']} ‚Äî {item['cost']}‚ÇΩ\n"

        seller_message += f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {order['total']}‚ÇΩ\n\n"
        seller_message += f"üöö –°—Ç–∞—Ç—É—Å: –î–æ—Å—Ç–∞–≤–ª–µ–Ω (—Ç–æ–≤–∞—Ä—ã —Å–ø–∏—Å–∞–Ω—ã —Å–æ —Å–∫–ª–∞–¥–∞)"

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=seller_message,
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
        bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π! –¢–æ–≤–∞—Ä—ã —Å–ø–∏—Å–∞–Ω—ã.")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        user_message = (
            f"üéâ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            f"üöö –°—Ç–∞—Ç—É—Å: –î–æ—Å—Ç–∞–≤–ª–µ–Ω\n\n"
            f"–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
        )
        bot.send_message(order['chat_id'], user_message)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.")


@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("cancel_order_"))
def handle_cancel_order(call):
    try:
        order_id = int(call.data.split("_")[2])
        order = all_orders.get(order_id)

        if not order:
            return bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order['status'] = 'cancelled'

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø—Ä–æ–¥–∞–≤—Ü–∞ (—É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏)
        seller_message = (
            f"‚ùå –ó–ê–ö–ê–ó #{order_id} (–û—Ç–º–µ–Ω–µ–Ω)\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {bot.get_chat(order['chat_id']).first_name}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
            f"üè† –ê–¥—Ä–µ—Å: {order['address']}\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä—ã:\n"
        )

        for item in order['items']:
            seller_message += f"‚Ä¢ {item['name']} √ó{item['quantity']} ‚Äî {item['cost']}‚ÇΩ\n"

        seller_message += f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {order['total']}‚ÇΩ\n\n"
        seller_message += f"‚ùå –°—Ç–∞—Ç—É—Å: –û—Ç–º–µ–Ω–µ–Ω"

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=seller_message,
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
        bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω!")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        user_message = (
            f"üòû –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            f"‚ùå –°—Ç–∞—Ç—É—Å: –û—Ç–º–µ–Ω–µ–Ω\n\n"
            f"–ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–º–µ–Ω–∏–ª –≤–∞—à –∑–∞–∫–∞–∑. –ü—Ä–∏—á–∏–Ω—ã:\n"
            f"- –¢–æ–≤–∞—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –Ω–∞ —Å–∫–ª–∞–¥–µ\n"
            f"- –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –≤ –≤–∞—à —Ä–µ–≥–∏–æ–Ω\n"
            f"- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
        )
        bot.send_message(order['chat_id'], user_message)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞.")

@bot.message_handler(func=lambda message: message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
@bot.message_handler(commands=["reload"])
def handle_reload_catalog(message):
    try:
        loader.reload()
        bot.send_message(message.chat.id, "‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        logging.info(f"–ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.chat.id}")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")


@bot.callback_query_handler(func=lambda c: c.data == "unavailable")
def handle_unavailable(call):
    bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")


if __name__ == "__main__":
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    bot.infinity_polling(timeout=60, long_polling_timeout=5)